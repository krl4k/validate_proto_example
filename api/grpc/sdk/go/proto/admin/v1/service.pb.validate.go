// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/admin/v1/service.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Admin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Admin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Admin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AdminMultiError, or nil if none found.
func (m *Admin) ValidateAll() error {
	return m.validate(true)
}

func (m *Admin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for FullName

	// no validation rules for IsActive

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AdminMultiError(errors)
	}

	return nil
}

// AdminMultiError is an error wrapping multiple validation errors returned by
// Admin.ValidateAll() if the designated constraints aren't met.
type AdminMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminMultiError) AllErrors() []error { return m }

// AdminValidationError is the validation error returned by Admin.Validate if
// the designated constraints aren't met.
type AdminValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminValidationError) ErrorName() string { return "AdminValidationError" }

// Error satisfies the builtin error interface
func (e AdminValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdmin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminValidationError{}

// Validate checks the field values on CreateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdminRequestMultiError, or nil if none found.
func (m *CreateAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for FullName

	if len(errors) > 0 {
		return CreateAdminRequestMultiError(errors)
	}

	return nil
}

// CreateAdminRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminRequestMultiError) AllErrors() []error { return m }

// CreateAdminRequestValidationError is the validation error returned by
// CreateAdminRequest.Validate if the designated constraints aren't met.
type CreateAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminRequestValidationError) ErrorName() string {
	return "CreateAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminRequestValidationError{}

// Validate checks the field values on CreateAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdminResponseMultiError, or nil if none found.
func (m *CreateAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAdminResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAdminResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAdminResponseValidationError{
				field:  "Admin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAdminResponseMultiError(errors)
	}

	return nil
}

// CreateAdminResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminResponseMultiError) AllErrors() []error { return m }

// CreateAdminResponseValidationError is the validation error returned by
// CreateAdminResponse.Validate if the designated constraints aren't met.
type CreateAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminResponseValidationError) ErrorName() string {
	return "CreateAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminResponseValidationError{}

// Validate checks the field values on GetAdminRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminRequestMultiError, or nil if none found.
func (m *GetAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAdminRequestMultiError(errors)
	}

	return nil
}

// GetAdminRequestMultiError is an error wrapping multiple validation errors
// returned by GetAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminRequestMultiError) AllErrors() []error { return m }

// GetAdminRequestValidationError is the validation error returned by
// GetAdminRequest.Validate if the designated constraints aren't met.
type GetAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminRequestValidationError) ErrorName() string { return "GetAdminRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminRequestValidationError{}

// Validate checks the field values on GetAdminResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminResponseMultiError, or nil if none found.
func (m *GetAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAdminResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAdminResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAdminResponseValidationError{
				field:  "Admin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAdminResponseMultiError(errors)
	}

	return nil
}

// GetAdminResponseMultiError is an error wrapping multiple validation errors
// returned by GetAdminResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminResponseMultiError) AllErrors() []error { return m }

// GetAdminResponseValidationError is the validation error returned by
// GetAdminResponse.Validate if the designated constraints aren't met.
type GetAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminResponseValidationError) ErrorName() string { return "GetAdminResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminResponseValidationError{}

// Validate checks the field values on UpdateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdminRequestMultiError, or nil if none found.
func (m *UpdateAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for FullName

	// no validation rules for IsActive

	if len(errors) > 0 {
		return UpdateAdminRequestMultiError(errors)
	}

	return nil
}

// UpdateAdminRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminRequestMultiError) AllErrors() []error { return m }

// UpdateAdminRequestValidationError is the validation error returned by
// UpdateAdminRequest.Validate if the designated constraints aren't met.
type UpdateAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminRequestValidationError) ErrorName() string {
	return "UpdateAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminRequestValidationError{}

// Validate checks the field values on UpdateAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdminResponseMultiError, or nil if none found.
func (m *UpdateAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAdminResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAdminResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAdminResponseValidationError{
				field:  "Admin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAdminResponseMultiError(errors)
	}

	return nil
}

// UpdateAdminResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminResponseMultiError) AllErrors() []error { return m }

// UpdateAdminResponseValidationError is the validation error returned by
// UpdateAdminResponse.Validate if the designated constraints aren't met.
type UpdateAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminResponseValidationError) ErrorName() string {
	return "UpdateAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminResponseValidationError{}

// Validate checks the field values on DeleteAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminRequestMultiError, or nil if none found.
func (m *DeleteAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAdminRequestMultiError(errors)
	}

	return nil
}

// DeleteAdminRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminRequestMultiError) AllErrors() []error { return m }

// DeleteAdminRequestValidationError is the validation error returned by
// DeleteAdminRequest.Validate if the designated constraints aren't met.
type DeleteAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminRequestValidationError) ErrorName() string {
	return "DeleteAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminRequestValidationError{}

// Validate checks the field values on DeleteAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminResponseMultiError, or nil if none found.
func (m *DeleteAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteAdminResponseMultiError(errors)
	}

	return nil
}

// DeleteAdminResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminResponseMultiError) AllErrors() []error { return m }

// DeleteAdminResponseValidationError is the validation error returned by
// DeleteAdminResponse.Validate if the designated constraints aren't met.
type DeleteAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminResponseValidationError) ErrorName() string {
	return "DeleteAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminResponseValidationError{}

// Validate checks the field values on ListAdminsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAdminsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminsRequestMultiError, or nil if none found.
func (m *ListAdminsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListAdminsRequestMultiError(errors)
	}

	return nil
}

// ListAdminsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAdminsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAdminsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminsRequestMultiError) AllErrors() []error { return m }

// ListAdminsRequestValidationError is the validation error returned by
// ListAdminsRequest.Validate if the designated constraints aren't met.
type ListAdminsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminsRequestValidationError) ErrorName() string {
	return "ListAdminsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminsRequestValidationError{}

// Validate checks the field values on ListAdminsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminsResponseMultiError, or nil if none found.
func (m *ListAdminsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdmins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdminsResponseValidationError{
						field:  fmt.Sprintf("Admins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdminsResponseValidationError{
						field:  fmt.Sprintf("Admins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdminsResponseValidationError{
					field:  fmt.Sprintf("Admins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListAdminsResponseMultiError(errors)
	}

	return nil
}

// ListAdminsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAdminsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAdminsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminsResponseMultiError) AllErrors() []error { return m }

// ListAdminsResponseValidationError is the validation error returned by
// ListAdminsResponse.Validate if the designated constraints aren't met.
type ListAdminsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminsResponseValidationError) ErrorName() string {
	return "ListAdminsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminsResponseValidationError{}
